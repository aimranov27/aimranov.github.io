{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/aydinimranov/Desktop/challenge/wordle-az/azwordle/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import{WORDS}from'../constants/wordlist';import{VALID_GUESSES}from'../constants/validGuesses';import{WRONG_SPOT_MESSAGE,NOT_CONTAINED_MESSAGE}from'../constants/strings';import{getGuessStatuses}from'./statuses';export var isWordInWordList=function isWordInWordList(word){return WORDS.includes(word)||VALID_GUESSES.includes(word);};export var isWinningWord=function isWinningWord(word){return solution===word;};// build a set of previously revealed letters - present and correct\n// guess must use correct letters in that space and any other revealed letters\n// also check if all revealed instances of a letter are used (i.e. two C's)\nexport var findFirstUnusedReveal=function findFirstUnusedReveal(word,guesses){if(guesses.length===0){return false;}var lettersLeftArray=new Array();var guess=guesses[guesses.length-1];var statuses=getGuessStatuses(guess);for(var i=0;i<guess.length;i++){if(statuses[i]==='correct'||statuses[i]==='present'){lettersLeftArray.push(guess[i]);}if(statuses[i]==='correct'&&word[i]!==guess[i]){return WRONG_SPOT_MESSAGE(guess[i],i+1);}}// check for the first unused letter, taking duplicate letters\n// into account - see issue #198\nvar n;var _iterator=_createForOfIteratorHelper(word),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var letter=_step.value;n=lettersLeftArray.indexOf(letter);if(n!==-1){lettersLeftArray.splice(n,1);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}if(lettersLeftArray.length>0){return NOT_CONTAINED_MESSAGE(lettersLeftArray[0]);}return false;};export var getWordOfDay=function getWordOfDay(){// January 1, 2022 Game Epoch\nvar epochMs=new Date('January 1, 2022 00:00:00').valueOf();var now=Date.now();var msInDay=86400000;var index=Math.floor((now-epochMs)/msInDay);var nextday=(index+1)*msInDay+epochMs;return{solution:WORDS[index%WORDS.length].toUpperCase(),solutionIndex:index,tomorrow:nextday};};var _getWordOfDay=getWordOfDay(),solution=_getWordOfDay.solution,solutionIndex=_getWordOfDay.solutionIndex,tomorrow=_getWordOfDay.tomorrow;export{solution,solutionIndex,tomorrow};","map":{"version":3,"sources":["/Users/aydinimranov/Desktop/challenge/wordle-az/azwordle/src/lib/words.ts"],"names":["WORDS","VALID_GUESSES","WRONG_SPOT_MESSAGE","NOT_CONTAINED_MESSAGE","getGuessStatuses","isWordInWordList","word","includes","isWinningWord","solution","findFirstUnusedReveal","guesses","length","lettersLeftArray","Array","guess","statuses","i","push","n","letter","indexOf","splice","getWordOfDay","epochMs","Date","valueOf","now","msInDay","index","Math","floor","nextday","toUpperCase","solutionIndex","tomorrow"],"mappings":"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","sourcesContent":["import { WORDS } from '../constants/wordlist'\nimport { VALID_GUESSES } from '../constants/validGuesses'\nimport { WRONG_SPOT_MESSAGE, NOT_CONTAINED_MESSAGE } from '../constants/strings'\nimport { getGuessStatuses } from './statuses'\n\nexport const isWordInWordList = (word: string) => {\n  return WORDS.includes(word) || VALID_GUESSES.includes(word)\n}\n\nexport const isWinningWord = (word: string) => {\n  return solution === word\n}\n\n// build a set of previously revealed letters - present and correct\n// guess must use correct letters in that space and any other revealed letters\n// also check if all revealed instances of a letter are used (i.e. two C's)\nexport const findFirstUnusedReveal = (word: string, guesses: string[]) => {\n  if (guesses.length === 0) {\n    return false\n  }\n\n  const lettersLeftArray = new Array<string>()\n  const guess = guesses[guesses.length - 1]\n  const statuses = getGuessStatuses(guess)\n\n  for (let i = 0; i < guess.length; i++) {\n    if (statuses[i] === 'correct' || statuses[i] === 'present') {\n      lettersLeftArray.push(guess[i])\n    }\n    if (statuses[i] === 'correct' && word[i] !== guess[i]) {\n      return WRONG_SPOT_MESSAGE(guess[i], i + 1)\n    }\n  }\n\n  // check for the first unused letter, taking duplicate letters\n  // into account - see issue #198\n  let n\n  for (const letter of word) {\n    n = lettersLeftArray.indexOf(letter)\n    if (n !== -1) {\n      lettersLeftArray.splice(n, 1)\n    }\n  }\n\n  if (lettersLeftArray.length > 0) {\n    return NOT_CONTAINED_MESSAGE(lettersLeftArray[0])\n  }\n  return false\n}\n\nexport const getWordOfDay = () => {\n  // January 1, 2022 Game Epoch\n  const epochMs = new Date('January 1, 2022 00:00:00').valueOf()\n  const now = Date.now()\n  const msInDay = 86400000\n  const index = Math.floor((now - epochMs) / msInDay)\n  const nextday = (index + 1) * msInDay + epochMs\n\n  return {\n    solution: WORDS[index % WORDS.length].toUpperCase(),\n    solutionIndex: index,\n    tomorrow: nextday,\n  }\n}\n\nexport const { solution, solutionIndex, tomorrow } = getWordOfDay()\n"]},"metadata":{},"sourceType":"module"}