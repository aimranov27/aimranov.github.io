{"ast":null,"code":"import { WORDS } from '../constants/wordlist';\nimport { VALID_GUESSES } from '../constants/validGuesses';\nimport { WRONG_SPOT_MESSAGE, NOT_CONTAINED_MESSAGE } from '../constants/strings';\nimport { getGuessStatuses } from './statuses';\nexport const isWordInWordList = word => {\n  return WORDS.includes(word) || VALID_GUESSES.includes(word);\n};\nexport const isWinningWord = word => {\n  return solution === word;\n}; // build a set of previously revealed letters - present and correct\n// guess must use correct letters in that space and any other revealed letters\n// also check if all revealed instances of a letter are used (i.e. two C's)\n\nexport const findFirstUnusedReveal = (word, guesses) => {\n  if (guesses.length === 0) {\n    return false;\n  }\n\n  const lettersLeftArray = new Array();\n  const guess = guesses[guesses.length - 1];\n  const statuses = getGuessStatuses(guess);\n\n  for (let i = 0; i < guess.length; i++) {\n    if (statuses[i] === 'correct' || statuses[i] === 'present') {\n      lettersLeftArray.push(guess[i]);\n    }\n\n    if (statuses[i] === 'correct' && word[i] !== guess[i]) {\n      return WRONG_SPOT_MESSAGE(guess[i], i + 1);\n    }\n  } // check for the first unused letter, taking duplicate letters\n  // into account - see issue #198\n\n\n  let n;\n\n  for (const letter of word) {\n    n = lettersLeftArray.indexOf(letter);\n\n    if (n !== -1) {\n      lettersLeftArray.splice(n, 1);\n    }\n  }\n\n  if (lettersLeftArray.length > 0) {\n    return NOT_CONTAINED_MESSAGE(lettersLeftArray[0]);\n  }\n\n  return false;\n};\nexport const getWordOfDay = () => {\n  // January 1, 2022 Game Epoch\n  const epochMs = new Date('January 1, 2022 00:00:00').valueOf();\n  const now = Date.now();\n  const msInDay = 86400000;\n  const index = Math.floor((now - epochMs) / msInDay);\n  const nextday = (index + 1) * msInDay + epochMs;\n  return {\n    solution: WORDS[index % WORDS.length].toUpperCase(),\n    solutionIndex: index,\n    tomorrow: nextday\n  };\n};\nexport const {\n  solution,\n  solutionIndex,\n  tomorrow\n} = getWordOfDay();","map":{"version":3,"sources":["/Users/aydinimranov/Desktop/challenge/wordle-az/azwordle/src/lib/words.ts"],"names":["WORDS","VALID_GUESSES","WRONG_SPOT_MESSAGE","NOT_CONTAINED_MESSAGE","getGuessStatuses","isWordInWordList","word","includes","isWinningWord","solution","findFirstUnusedReveal","guesses","length","lettersLeftArray","Array","guess","statuses","i","push","n","letter","indexOf","splice","getWordOfDay","epochMs","Date","valueOf","now","msInDay","index","Math","floor","nextday","toUpperCase","solutionIndex","tomorrow"],"mappings":"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","sourcesContent":["import { WORDS } from '../constants/wordlist'\nimport { VALID_GUESSES } from '../constants/validGuesses'\nimport { WRONG_SPOT_MESSAGE, NOT_CONTAINED_MESSAGE } from '../constants/strings'\nimport { getGuessStatuses } from './statuses'\n\nexport const isWordInWordList = (word: string) => {\n  return WORDS.includes(word) || VALID_GUESSES.includes(word)\n}\n\nexport const isWinningWord = (word: string) => {\n  return solution === word\n}\n\n// build a set of previously revealed letters - present and correct\n// guess must use correct letters in that space and any other revealed letters\n// also check if all revealed instances of a letter are used (i.e. two C's)\nexport const findFirstUnusedReveal = (word: string, guesses: string[]) => {\n  if (guesses.length === 0) {\n    return false\n  }\n\n  const lettersLeftArray = new Array<string>()\n  const guess = guesses[guesses.length - 1]\n  const statuses = getGuessStatuses(guess)\n\n  for (let i = 0; i < guess.length; i++) {\n    if (statuses[i] === 'correct' || statuses[i] === 'present') {\n      lettersLeftArray.push(guess[i])\n    }\n    if (statuses[i] === 'correct' && word[i] !== guess[i]) {\n      return WRONG_SPOT_MESSAGE(guess[i], i + 1)\n    }\n  }\n\n  // check for the first unused letter, taking duplicate letters\n  // into account - see issue #198\n  let n\n  for (const letter of word) {\n    n = lettersLeftArray.indexOf(letter)\n    if (n !== -1) {\n      lettersLeftArray.splice(n, 1)\n    }\n  }\n\n  if (lettersLeftArray.length > 0) {\n    return NOT_CONTAINED_MESSAGE(lettersLeftArray[0])\n  }\n  return false\n}\n\nexport const getWordOfDay = () => {\n  // January 1, 2022 Game Epoch\n  const epochMs = new Date('January 1, 2022 00:00:00').valueOf()\n  const now = Date.now()\n  const msInDay = 86400000\n  const index = Math.floor((now - epochMs) / msInDay)\n  const nextday = (index + 1) * msInDay + epochMs\n\n  return {\n    solution: WORDS[index % WORDS.length].toUpperCase(),\n    solutionIndex: index,\n    tomorrow: nextday,\n  }\n}\n\nexport const { solution, solutionIndex, tomorrow } = getWordOfDay()\n"]},"metadata":{},"sourceType":"module"}