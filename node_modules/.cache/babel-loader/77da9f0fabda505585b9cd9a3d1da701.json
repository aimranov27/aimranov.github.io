{"ast":null,"code":"import _toConsumableArray from\"/Users/aydinimranov/Desktop/challenge/wordle-az/azwordle/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/aydinimranov/Desktop/challenge/wordle-az/azwordle/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{InformationCircleIcon,ChartBarIcon,CogIcon}from'@heroicons/react/outline';import{useState,useEffect}from'react';import{Grid}from'./components/grid/Grid';import{Keyboard}from'./components/keyboard/Keyboard';import{InfoModal}from'./components/modals/InfoModal';import{StatsModal}from'./components/modals/StatsModal';import{SettingsModal}from'./components/modals/SettingsModal';import{GAME_TITLE,WIN_MESSAGES,GAME_COPIED_MESSAGE,NOT_ENOUGH_LETTERS_MESSAGE,WORD_NOT_FOUND_MESSAGE,CORRECT_WORD_MESSAGE,HARD_MODE_ALERT_MESSAGE}from'./constants/strings';import{MAX_WORD_LENGTH,MAX_CHALLENGES,ALERT_TIME_MS,REVEAL_TIME_MS,GAME_LOST_INFO_DELAY}from'./constants/settings';import{isWordInWordList,isWinningWord,solution,findFirstUnusedReveal}from'./lib/words';import{addStatsForCompletedGame,loadStats}from'./lib/stats';import{loadGameStateFromLocalStorage,saveGameStateToLocalStorage,setStoredIsHighContrastMode,getStoredIsHighContrastMode}from'./lib/localStorage';import'./App.css';import{AlertContainer}from'./components/alerts/AlertContainer';import{useAlert}from'./context/AlertContext';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var prefersDarkMode=window.matchMedia('(prefers-color-scheme: dark)').matches;var _useAlert=useAlert(),showErrorAlert=_useAlert.showError,showSuccessAlert=_useAlert.showSuccess;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),currentGuess=_useState2[0],setCurrentGuess=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isGameWon=_useState4[0],setIsGameWon=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isInfoModalOpen=_useState6[0],setIsInfoModalOpen=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isStatsModalOpen=_useState8[0],setIsStatsModalOpen=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),isSettingsModalOpen=_useState10[0],setIsSettingsModalOpen=_useState10[1];var _useState11=useState(''),_useState12=_slicedToArray(_useState11,2),currentRowClass=_useState12[0],setCurrentRowClass=_useState12[1];var _useState13=useState(false),_useState14=_slicedToArray(_useState13,2),isGameLost=_useState14[0],setIsGameLost=_useState14[1];var _useState15=useState(localStorage.getItem('theme')?localStorage.getItem('theme')==='dark':prefersDarkMode?true:false),_useState16=_slicedToArray(_useState15,2),isDarkMode=_useState16[0],setIsDarkMode=_useState16[1];var _useState17=useState(getStoredIsHighContrastMode()),_useState18=_slicedToArray(_useState17,2),isHighContrastMode=_useState18[0],setIsHighContrastMode=_useState18[1];var _useState19=useState(false),_useState20=_slicedToArray(_useState19,2),isRevealing=_useState20[0],setIsRevealing=_useState20[1];var _useState21=useState(function(){var loaded=loadGameStateFromLocalStorage();if((loaded===null||loaded===void 0?void 0:loaded.solution)!==solution){return[];}var gameWasWon=loaded.guesses.includes(solution);if(gameWasWon){setIsGameWon(true);}if(loaded.guesses.length===MAX_CHALLENGES&&!gameWasWon){setIsGameLost(true);showErrorAlert(CORRECT_WORD_MESSAGE(solution),{persist:true});}return loaded.guesses;}),_useState22=_slicedToArray(_useState21,2),guesses=_useState22[0],setGuesses=_useState22[1];var _useState23=useState(function(){return loadStats();}),_useState24=_slicedToArray(_useState23,2),stats=_useState24[0],setStats=_useState24[1];var _useState25=useState(localStorage.getItem('gameMode')?localStorage.getItem('gameMode')==='hard':false),_useState26=_slicedToArray(_useState25,2),isHardMode=_useState26[0],setIsHardMode=_useState26[1];useEffect(function(){// if no game state on load,\n// show the user the how-to info modal\nif(!loadGameStateFromLocalStorage()){setIsInfoModalOpen(true);}},[]);useEffect(function(){if(isDarkMode){document.documentElement.classList.add('dark');}else{document.documentElement.classList.remove('dark');}if(isHighContrastMode){document.documentElement.classList.add('high-contrast');}else{document.documentElement.classList.remove('high-contrast');}},[isDarkMode,isHighContrastMode]);var handleDarkMode=function handleDarkMode(isDark){setIsDarkMode(isDark);localStorage.setItem('theme',isDark?'dark':'light');};var handleHardMode=function handleHardMode(isHard){if(guesses.length===0||localStorage.getItem('gameMode')==='hard'){setIsHardMode(isHard);localStorage.setItem('gameMode',isHard?'hard':'normal');}else{showErrorAlert(HARD_MODE_ALERT_MESSAGE);}};var handleHighContrastMode=function handleHighContrastMode(isHighContrast){setIsHighContrastMode(isHighContrast);setStoredIsHighContrastMode(isHighContrast);};useEffect(function(){saveGameStateToLocalStorage({guesses:guesses,solution:solution});},[guesses]);useEffect(function(){if(isGameWon){var winMessage=WIN_MESSAGES[Math.floor(Math.random()*WIN_MESSAGES.length)];var delayMs=REVEAL_TIME_MS*MAX_WORD_LENGTH;showSuccessAlert(winMessage,{delayMs:delayMs,onClose:function onClose(){return setIsStatsModalOpen(true);}});}if(isGameLost){setTimeout(function(){setIsStatsModalOpen(true);},GAME_LOST_INFO_DELAY);}},[isGameWon,isGameLost,showSuccessAlert]);var onChar=function onChar(value){if(currentGuess.length<MAX_WORD_LENGTH&&guesses.length<MAX_CHALLENGES&&!isGameWon){setCurrentGuess(\"\".concat(currentGuess).concat(value));}};var onDelete=function onDelete(){setCurrentGuess(currentGuess.slice(0,-1));};var onEnter=function onEnter(){if(isGameWon||isGameLost){return;}if(!(currentGuess.length===MAX_WORD_LENGTH)){showErrorAlert(NOT_ENOUGH_LETTERS_MESSAGE);setCurrentRowClass('jiggle');return setTimeout(function(){setCurrentRowClass('');},ALERT_TIME_MS);}if(!isWordInWordList(currentGuess)){showErrorAlert(WORD_NOT_FOUND_MESSAGE);setCurrentRowClass('jiggle');return setTimeout(function(){setCurrentRowClass('');},ALERT_TIME_MS);}// enforce hard mode - all guesses must contain all previously revealed letters\nif(isHardMode){var firstMissingReveal=findFirstUnusedReveal(currentGuess,guesses);if(firstMissingReveal){showErrorAlert(firstMissingReveal);setCurrentRowClass('jiggle');return setTimeout(function(){setCurrentRowClass('');},ALERT_TIME_MS);}}setIsRevealing(true);// turn this back off after all\n// chars have been revealed\nsetTimeout(function(){setIsRevealing(false);},REVEAL_TIME_MS*MAX_WORD_LENGTH);var winningWord=isWinningWord(currentGuess);if(currentGuess.length===MAX_WORD_LENGTH&&guesses.length<MAX_CHALLENGES&&!isGameWon){setGuesses([].concat(_toConsumableArray(guesses),[currentGuess]));setCurrentGuess('');if(winningWord){setStats(addStatsForCompletedGame(stats,guesses.length));return setIsGameWon(true);}if(guesses.length===MAX_CHALLENGES-1){setStats(addStatsForCompletedGame(stats,guesses.length+1));setIsGameLost(true);showErrorAlert(CORRECT_WORD_MESSAGE(solution),{persist:true,delayMs:REVEAL_TIME_MS*MAX_WORD_LENGTH+1});}}};return/*#__PURE__*/_jsxs(\"div\",{className:\"pt-2 pb-8 max-w-7xl mx-auto sm:px-6 lg:px-8\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex w-80 mx-auto items-center mb-8 mt-20\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-xl ml-2.5 grow font-bold dark:text-white\",children:GAME_TITLE}),/*#__PURE__*/_jsx(InformationCircleIcon,{className:\"h-6 w-6 mr-2 cursor-pointer dark:stroke-white\",onClick:function onClick(){return setIsInfoModalOpen(true);}}),/*#__PURE__*/_jsx(ChartBarIcon,{className:\"h-6 w-6 mr-3 cursor-pointer dark:stroke-white\",onClick:function onClick(){return setIsStatsModalOpen(true);}}),/*#__PURE__*/_jsx(CogIcon,{className:\"h-6 w-6 mr-3 cursor-pointer dark:stroke-white\",onClick:function onClick(){return setIsSettingsModalOpen(true);}})]}),/*#__PURE__*/_jsx(Grid,{guesses:guesses,currentGuess:currentGuess,isRevealing:isRevealing,currentRowClassName:currentRowClass}),/*#__PURE__*/_jsx(Keyboard,{onChar:onChar,onDelete:onDelete,onEnter:onEnter,guesses:guesses,isRevealing:isRevealing}),/*#__PURE__*/_jsx(InfoModal,{isOpen:isInfoModalOpen,handleClose:function handleClose(){return setIsInfoModalOpen(false);}}),/*#__PURE__*/_jsx(StatsModal,{isOpen:isStatsModalOpen,handleClose:function handleClose(){return setIsStatsModalOpen(false);},guesses:guesses,gameStats:stats,isGameLost:isGameLost,isGameWon:isGameWon,handleShare:function handleShare(){return showSuccessAlert(GAME_COPIED_MESSAGE);},isHardMode:isHardMode}),/*#__PURE__*/_jsx(SettingsModal,{isOpen:isSettingsModalOpen,handleClose:function handleClose(){return setIsSettingsModalOpen(false);},isHardMode:isHardMode,handleHardMode:handleHardMode,isDarkMode:isDarkMode,handleDarkMode:handleDarkMode,isHighContrastMode:isHighContrastMode,handleHighContrastMode:handleHighContrastMode}),/*#__PURE__*/_jsx(AlertContainer,{})]});}export default App;","map":{"version":3,"sources":["/Users/aydinimranov/Desktop/challenge/wordle-az/azwordle/src/App.tsx"],"names":["InformationCircleIcon","ChartBarIcon","CogIcon","useState","useEffect","Grid","Keyboard","InfoModal","StatsModal","SettingsModal","GAME_TITLE","WIN_MESSAGES","GAME_COPIED_MESSAGE","NOT_ENOUGH_LETTERS_MESSAGE","WORD_NOT_FOUND_MESSAGE","CORRECT_WORD_MESSAGE","HARD_MODE_ALERT_MESSAGE","MAX_WORD_LENGTH","MAX_CHALLENGES","ALERT_TIME_MS","REVEAL_TIME_MS","GAME_LOST_INFO_DELAY","isWordInWordList","isWinningWord","solution","findFirstUnusedReveal","addStatsForCompletedGame","loadStats","loadGameStateFromLocalStorage","saveGameStateToLocalStorage","setStoredIsHighContrastMode","getStoredIsHighContrastMode","AlertContainer","useAlert","App","prefersDarkMode","window","matchMedia","matches","showErrorAlert","showError","showSuccessAlert","showSuccess","currentGuess","setCurrentGuess","isGameWon","setIsGameWon","isInfoModalOpen","setIsInfoModalOpen","isStatsModalOpen","setIsStatsModalOpen","isSettingsModalOpen","setIsSettingsModalOpen","currentRowClass","setCurrentRowClass","isGameLost","setIsGameLost","localStorage","getItem","isDarkMode","setIsDarkMode","isHighContrastMode","setIsHighContrastMode","isRevealing","setIsRevealing","loaded","gameWasWon","guesses","includes","length","persist","setGuesses","stats","setStats","isHardMode","setIsHardMode","document","documentElement","classList","add","remove","handleDarkMode","isDark","setItem","handleHardMode","isHard","handleHighContrastMode","isHighContrast","winMessage","Math","floor","random","delayMs","onClose","setTimeout","onChar","value","onDelete","slice","onEnter","firstMissingReveal","winningWord"],"mappings":"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","sourcesContent":["import {\n  InformationCircleIcon,\n  ChartBarIcon,\n  CogIcon,\n} from '@heroicons/react/outline'\nimport { useState, useEffect } from 'react'\nimport { Grid } from './components/grid/Grid'\nimport { Keyboard } from './components/keyboard/Keyboard'\nimport { InfoModal } from './components/modals/InfoModal'\nimport { StatsModal } from './components/modals/StatsModal'\nimport { SettingsModal } from './components/modals/SettingsModal'\nimport {\n  GAME_TITLE,\n  WIN_MESSAGES,\n  GAME_COPIED_MESSAGE,\n  NOT_ENOUGH_LETTERS_MESSAGE,\n  WORD_NOT_FOUND_MESSAGE,\n  CORRECT_WORD_MESSAGE,\n  HARD_MODE_ALERT_MESSAGE,\n} from './constants/strings'\nimport {\n  MAX_WORD_LENGTH,\n  MAX_CHALLENGES,\n  ALERT_TIME_MS,\n  REVEAL_TIME_MS,\n  GAME_LOST_INFO_DELAY,\n} from './constants/settings'\nimport {\n  isWordInWordList,\n  isWinningWord,\n  solution,\n  findFirstUnusedReveal,\n} from './lib/words'\nimport { addStatsForCompletedGame, loadStats } from './lib/stats'\nimport {\n  loadGameStateFromLocalStorage,\n  saveGameStateToLocalStorage,\n  setStoredIsHighContrastMode,\n  getStoredIsHighContrastMode,\n} from './lib/localStorage'\n\nimport './App.css'\nimport { AlertContainer } from './components/alerts/AlertContainer'\nimport { useAlert } from './context/AlertContext'\n\nfunction App() {\n  const prefersDarkMode = window.matchMedia(\n    '(prefers-color-scheme: dark)'\n  ).matches\n\n  const { showError: showErrorAlert, showSuccess: showSuccessAlert } =\n    useAlert()\n  const [currentGuess, setCurrentGuess] = useState('')\n  const [isGameWon, setIsGameWon] = useState(false)\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false)\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false)\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false)\n  const [currentRowClass, setCurrentRowClass] = useState('')\n  const [isGameLost, setIsGameLost] = useState(false)\n  const [isDarkMode, setIsDarkMode] = useState(\n    localStorage.getItem('theme')\n      ? localStorage.getItem('theme') === 'dark'\n      : prefersDarkMode\n      ? true\n      : false\n  )\n  const [isHighContrastMode, setIsHighContrastMode] = useState(\n    getStoredIsHighContrastMode()\n  )\n  const [isRevealing, setIsRevealing] = useState(false)\n  const [guesses, setGuesses] = useState<string[]>(() => {\n    const loaded = loadGameStateFromLocalStorage()\n    if (loaded?.solution !== solution) {\n      return []\n    }\n    const gameWasWon = loaded.guesses.includes(solution)\n    if (gameWasWon) {\n      setIsGameWon(true)\n    }\n    if (loaded.guesses.length === MAX_CHALLENGES && !gameWasWon) {\n      setIsGameLost(true)\n      showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n        persist: true,\n      })\n    }\n    return loaded.guesses\n  })\n\n  const [stats, setStats] = useState(() => loadStats())\n\n  const [isHardMode, setIsHardMode] = useState(\n    localStorage.getItem('gameMode')\n      ? localStorage.getItem('gameMode') === 'hard'\n      : false\n  )\n\n  useEffect(() => {\n    // if no game state on load,\n    // show the user the how-to info modal\n    if (!loadGameStateFromLocalStorage()) {\n      setIsInfoModalOpen(true)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n\n    if (isHighContrastMode) {\n      document.documentElement.classList.add('high-contrast')\n    } else {\n      document.documentElement.classList.remove('high-contrast')\n    }\n  }, [isDarkMode, isHighContrastMode])\n\n  const handleDarkMode = (isDark: boolean) => {\n    setIsDarkMode(isDark)\n    localStorage.setItem('theme', isDark ? 'dark' : 'light')\n  }\n\n  const handleHardMode = (isHard: boolean) => {\n    if (guesses.length === 0 || localStorage.getItem('gameMode') === 'hard') {\n      setIsHardMode(isHard)\n      localStorage.setItem('gameMode', isHard ? 'hard' : 'normal')\n    } else {\n      showErrorAlert(HARD_MODE_ALERT_MESSAGE)\n    }\n  }\n\n  const handleHighContrastMode = (isHighContrast: boolean) => {\n    setIsHighContrastMode(isHighContrast)\n    setStoredIsHighContrastMode(isHighContrast)\n  }\n\n  useEffect(() => {\n    saveGameStateToLocalStorage({ guesses, solution })\n  }, [guesses])\n\n  useEffect(() => {\n    if (isGameWon) {\n      const winMessage =\n        WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]\n      const delayMs = REVEAL_TIME_MS * MAX_WORD_LENGTH\n\n      showSuccessAlert(winMessage, {\n        delayMs,\n        onClose: () => setIsStatsModalOpen(true),\n      })\n    }\n\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true)\n      }, GAME_LOST_INFO_DELAY)\n    }\n  }, [isGameWon, isGameLost, showSuccessAlert])\n\n  const onChar = (value: string) => {\n    if (\n      currentGuess.length < MAX_WORD_LENGTH &&\n      guesses.length < MAX_CHALLENGES &&\n      !isGameWon\n    ) {\n      setCurrentGuess(`${currentGuess}${value}`)\n    }\n  }\n\n  const onDelete = () => {\n    setCurrentGuess(currentGuess.slice(0, -1))\n  }\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return\n    }\n    if (!(currentGuess.length === MAX_WORD_LENGTH)) {\n      showErrorAlert(NOT_ENOUGH_LETTERS_MESSAGE)\n      setCurrentRowClass('jiggle')\n      return setTimeout(() => {\n        setCurrentRowClass('')\n      }, ALERT_TIME_MS)\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      showErrorAlert(WORD_NOT_FOUND_MESSAGE)\n      setCurrentRowClass('jiggle')\n      return setTimeout(() => {\n        setCurrentRowClass('')\n      }, ALERT_TIME_MS)\n    }\n\n    // enforce hard mode - all guesses must contain all previously revealed letters\n    if (isHardMode) {\n      const firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses)\n      if (firstMissingReveal) {\n        showErrorAlert(firstMissingReveal)\n        setCurrentRowClass('jiggle')\n        return setTimeout(() => {\n          setCurrentRowClass('')\n        }, ALERT_TIME_MS)\n      }\n    }\n\n    setIsRevealing(true)\n    // turn this back off after all\n    // chars have been revealed\n    setTimeout(() => {\n      setIsRevealing(false)\n    }, REVEAL_TIME_MS * MAX_WORD_LENGTH)\n\n    const winningWord = isWinningWord(currentGuess)\n\n    if (\n      currentGuess.length === MAX_WORD_LENGTH &&\n      guesses.length < MAX_CHALLENGES &&\n      !isGameWon\n    ) {\n      setGuesses([...guesses, currentGuess])\n      setCurrentGuess('')\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length))\n        return setIsGameWon(true)\n      }\n\n      if (guesses.length === MAX_CHALLENGES - 1) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1))\n        setIsGameLost(true)\n        showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n          persist: true,\n          delayMs: REVEAL_TIME_MS * MAX_WORD_LENGTH + 1,\n        })\n      }\n    }\n  }\n\n  return (\n    <div className=\"pt-2 pb-8 max-w-7xl mx-auto sm:px-6 lg:px-8\">\n      <div className=\"flex w-80 mx-auto items-center mb-8 mt-20\">\n        <h1 className=\"text-xl ml-2.5 grow font-bold dark:text-white\">\n          {GAME_TITLE}\n        </h1>\n        <InformationCircleIcon\n          className=\"h-6 w-6 mr-2 cursor-pointer dark:stroke-white\"\n          onClick={() => setIsInfoModalOpen(true)}\n        />\n        <ChartBarIcon\n          className=\"h-6 w-6 mr-3 cursor-pointer dark:stroke-white\"\n          onClick={() => setIsStatsModalOpen(true)}\n        />\n        <CogIcon\n          className=\"h-6 w-6 mr-3 cursor-pointer dark:stroke-white\"\n          onClick={() => setIsSettingsModalOpen(true)}\n        />\n      </div>\n      <Grid\n        guesses={guesses}\n        currentGuess={currentGuess}\n        isRevealing={isRevealing}\n        currentRowClassName={currentRowClass}\n      />\n      <Keyboard\n        onChar={onChar}\n        onDelete={onDelete}\n        onEnter={onEnter}\n        guesses={guesses}\n        isRevealing={isRevealing}\n      />\n      <InfoModal\n        isOpen={isInfoModalOpen}\n        handleClose={() => setIsInfoModalOpen(false)}\n      />\n      <StatsModal\n        isOpen={isStatsModalOpen}\n        handleClose={() => setIsStatsModalOpen(false)}\n        guesses={guesses}\n        gameStats={stats}\n        isGameLost={isGameLost}\n        isGameWon={isGameWon}\n        handleShare={() => showSuccessAlert(GAME_COPIED_MESSAGE)}\n        isHardMode={isHardMode}\n      />\n      <SettingsModal\n        isOpen={isSettingsModalOpen}\n        handleClose={() => setIsSettingsModalOpen(false)}\n        isHardMode={isHardMode}\n        handleHardMode={handleHardMode}\n        isDarkMode={isDarkMode}\n        handleDarkMode={handleDarkMode}\n        isHighContrastMode={isHighContrastMode}\n        handleHighContrastMode={handleHighContrastMode}\n      />\n\n      <AlertContainer />\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}